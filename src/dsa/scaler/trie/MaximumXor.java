package dsa.scaler.trie;

import java.util.ArrayList;
import java.util.List;

public class MaximumXor {

    public static void main(String[] args) {
        MaximumXor mx = new MaximumXor();
        System.out.println(mx.solve(new ArrayList<>(List.of(125021417, 125049686, 125042586, 125008029, 125013724, 125017678, 125007451, 125034062, 125025455, 125006471, 125036762, 125029812, 125045541, 125034929, 125054572, 125053536, 125041196, 125026800, 125050193, 125027488, 125060406, 125024199, 125029314, 125034800, 125029135, 125034907, 125027476, 125032057, 125035833, 125019303, 125011787, 125024068, 125028031, 125031279, 125021105, 125043444, 125041297, 125035968, 125010161, 125031226, 125016411, 125008422, 125042732, 125042519, 125062874, 125032668, 125037204, 125054152, 125028025, 125022291, 125037313, 125027718, 125016293, 125027097, 125047565, 125029307, 125029736, 125058913, 125045671, 125043449, 125013950, 125040624, 125030702, 125036280, 125020590, 125056663, 125031177, 125036484, 125033894, 125034543, 125030078, 125035390, 125024396, 125018638, 125025932, 125031823, 125006618, 125034752, 125055870, 125023075, 125008567, 125018555, 125006604, 125038236, 125024716, 125018849, 125022248, 125015251, 125024158, 125034603, 125024222, 125011142, 125052838, 125024426, 125036908, 125022486, 125042792, 125037245, 125030866, 125036669, 125055435, 125019787, 125027058, 125016968, 125047539, 125036083, 125025832, 125048781, 125018006, 125028619, 125045340, 125022368, 125017303, 125052956, 125029790, 125029717, 125025691, 125017099, 125043265, 125031659, 125034082, 125054116, 125017963, 125038416, 125038754, 125034947, 125062452, 125015055, 125021595, 125038034, 125008954, 125034128, 125053104, 125053378, 125024445, 125018058, 125032769, 125016704, 125047088, 125052288, 125023231, 125024239, 125036636, 125021938, 125037513, 125021537, 125045483, 125044510, 125006338, 125029260, 125034634, 125058163, 125029988, 125002754, 125014141, 125038087, 125003362, 125027886, 125006263, 125019732, 125062136, 125048262, 125050485, 125025133, 125021189, 125022918, 125043534, 125021364, 125039651, 125037288, 125026775, 125040152, 125061123, 125054108, 125025967, 125030598, 125034045, 125039486, 125023008, 125032810, 125033648, 125019728, 125049393, 125047771, 125029460, 125050482, 125030724, 125060188, 125025430, 125014232, 125027366, 125048405, 125021743, 125046919, 125009072, 125012098, 125033849, 125035143, 125038039, 125048501, 125043788, 125033307, 125030985, 125016325, 125021011, 125042177, 125007493, 125030543, 125051619, 125047905, 125060717, 125016486, 125057879, 125040968, 125040231, 125025169, 125031650, 125029348, 125018094, 125029822, 125034223, 125027508, 125020591, 125053569, 125034224, 125035527, 125031196, 125036354, 125048510, 125022707, 125025159, 125028925, 125035115, 125028297, 125025465, 125056440, 125035935, 125033231, 125006093, 125010106, 125018219, 125010425, 125025539, 125023555, 125043621, 125036901, 125023324, 125021191, 125017277, 125023304, 125022895, 125009311, 125038874, 125025455, 125042563, 125026632, 125018346, 125038134, 125031913, 125047066, 125036930, 125039100, 125020045, 125029308, 125017904, 125035552, 125039446, 125045664, 125023894, 125029044, 125011832, 125029305, 125040005, 125044281, 125044499, 125022643, 125035339, 125039510, 125012800, 125007276, 125046935, 125040526, 125024179, 125034348, 125030089, 125053883, 125049555, 125030682, 125038287, 125035778, 125022534, 125032316, 125050742, 125029266, 125035802, 125056931, 125043530, 125025361, 125034575, 125006382, 125015530, 125021154, 125012727, 125055995, 125040864, 125027087, 125013195, 125054052, 125059065, 125037772, 125053506, 125026545, 125031710, 125046184, 125031726, 125048470, 125045678, 125017287, 125028556, 125036648, 125041485, 125032029, 125012325, 125019095, 125024842, 125026211, 125050719, 125026913, 125013866, 125023310, 125035989, 125032657, 125055817, 125023624, 125027513, 125031409, 125024558, 125022827, 125021788, 125033157, 125024095, 125043190, 125024403, 125029957, 125028100, 125027971, 125020493, 125034126, 125039476, 125039300, 125030049, 125054370, 125055253, 125020215, 125008501, 125040540, 125039534, 125052705, 125041033, 125024360, 125041729, 125011973, 125034009, 125028089, 125007461, 125040279, 125040109, 125001226, 125041948, 125052478, 125027318, 125012553, 125017901, 125024260, 125031781, 125040151, 125041399, 125028881, 125028928, 125012675, 125012432, 125003937, 125036929, 125034295, 125022935, 125048959, 125048997, 125004858, 125025618, 125022972, 125013707, 125009444, 125024892, 125061989, 125049673, 125033495, 125009644, 125031934, 125032388, 125017270, 125027166, 125028471, 125017545, 125050974, 125043986, 125037543, 125048803, 125053146, 125025704, 125048897, 125027897, 125044390, 125012592, 125047118, 125030044, 125031318, 125033283, 125058341, 125005863, 125055777, 125026533, 125037603, 125039188, 125014024, 125039311, 125037153, 125036438, 125030298, 125019279, 125047469, 125016942, 125039206, 125026977, 125049606, 125043716, 125049459, 125021888, 125031054, 125046593, 125038332, 125047751, 125012227, 125018983, 125031845, 125036802, 125032380, 125053729, 125040946, 125025546, 125010970, 125044009, 125048258, 125001753, 125023110, 125022035, 125043333, 125044199, 125053158, 125011247, 125038835, 125040382, 125027222, 125037083, 125032841, 125036950, 125040605, 125023961, 125046266, 125016549, 125040873, 125026991, 125036782, 125057540, 125029449, 125034489, 125047603, 125030713, 125042394, 125019201, 125032057, 125051609, 125055821, 125031387, 125040012, 125023388, 125026838, 125028602, 125010439, 125013108, 125018854, 125021766, 125020049, 125025769, 125032358, 125035770, 125035663, 125034220, 125014249, 125005431, 125020259, 125041715, 125027306, 125022554, 125030175, 125052175, 125037055, 125039135, 125039293, 125019844, 125051288, 125032236, 125045211, 125013860, 125036718, 125030511, 125029359, 125014047, 125020353, 125024888, 125031170, 125032232, 125062224, 125048074, 125039332, 125040896, 125048271, 125052221, 125025770, 125010260, 125038619, 125033229, 125021981, 125027160, 125005950, 125031029, 125039103, 125043095, 125026841, 125028364, 125026229, 125011283, 125022951, 125032722, 125028808, 125025623, 125016622, 125036308, 125053532, 125041747, 125030523, 125040380, 125030884, 125038257, 125006101, 125035435, 125037149, 125034483, 125050111, 125025298, 125052934, 125036415, 125007716, 125019339, 125009817, 125015301, 125047702, 125048112, 125024766, 125023310, 125045893, 125061100, 125033866, 125026453, 125042102, 125056803, 125035698, 125017956, 125015484, 125008890, 125024834, 125057765, 125041199, 125036983, 125039389, 125014977, 125056293, 125025367, 125025643, 125035121, 125002793, 125022891, 125009239, 125034524, 125034675, 125037540, 125013831, 125030122, 125016611, 125001912, 125020045, 125032930, 125032756, 125030387, 125028269, 125035580, 125052150, 125040270, 125059334, 125034555, 125043017, 125004624, 125025554, 125027720, 125026000, 125040089, 125027102, 125026055, 125015150, 125024578, 125023103, 125020204, 125024826, 125012533, 125022284, 125039066, 125058553, 125028484, 125037461, 125044407, 125028628, 125015103, 125031196, 125028100, 125014036, 125023821, 125014413, 125023222, 125019030, 125015173, 125033781, 125035149, 125000388, 125012296, 125013052, 125029867, 125046606, 125040274, 125036117, 125018417, 125035235, 125037721, 125053959, 125046994, 125027877, 125025252, 125029203, 125033322, 125008165, 125029087, 125024756, 125012508, 125025626, 125044469, 125037850, 125012068, 125038871, 125028652, 125036187, 125021044, 125029510, 125044279, 125030320, 125026568, 125040668, 125051408, 125016366, 125058494, 125023384, 125026065, 125016373, 125018866, 125029489, 125034637, 125017718, 125056020, 125044440, 125057252, 125038813, 125047676, 125031464, 125008673, 125056981, 125034185, 125037541, 125044747, 125025782, 125035186, 125047853, 125030081, 125045318, 125042278, 125029047, 125024467, 125028071, 125029980, 125011780, 125041112, 125037913, 125023920, 125030302, 125049480, 125055020, 125035770, 125031690, 125015886, 125049401, 125034913, 125031234, 125037161, 125033307, 125028543, 125036785, 125032829, 125024936, 125026925, 125018531, 125034159, 125019683, 125031070, 125036869, 125044026, 125032446, 125016188, 125051160, 125047178, 125045065, 125015355, 125013546, 125029587, 125020719, 125047411, 125032785, 125029413, 125015978, 125026294, 125032604, 125045516, 125028034, 125018412, 125033045, 125022624, 125033789, 125034981, 125020527, 125034017, 125022171, 125020857, 125043589, 125028882, 125017615, 125045975, 125024335, 125018824, 125027123, 125050214, 125020825, 125037965, 125039942, 125032532, 125037246, 125030190, 125045021, 125035189, 125018784, 125046554, 125031455, 125027481, 125045530, 125021687, 125035393, 125055585, 125018880, 125036473, 125034737, 125009309, 125034389, 125040959, 125050081, 125027677, 125046397, 125043043, 125056554, 125042191, 125018427, 125031836, 125032279, 125036755, 125016619, 125051401, 125010254, 125014614, 125031153, 125054234, 125033365, 125038887, 125031547, 125048469, 125043196, 125057938, 125040754, 125037118, 125028324, 125046003, 125045813, 125033957, 125036779, 125039255, 125021521, 125047557, 125017895, 125040649, 125015929, 125023188, 125015781, 125029108, 125049851, 125027299, 125024215, 125013621, 125041341, 125041714, 125025235, 125040115, 125031603, 125012678, 125045510, 125026170, 125038546, 125046215, 125031857, 125019536, 125043860, 125051410, 125035357, 125034640, 125029602, 125033813, 125013910, 125030273, 125045907, 125045668, 125037599, 125001837, 125029225, 125012116, 125010095, 125030456, 125040765, 125012944, 125050916, 125032954, 125022016, 125026613, 125029186, 125038041, 125031922, 125043811, 125016289, 125044571, 125029783, 125048800, 125049773, 125025092, 125037424, 125022115, 125058396, 125048041, 125039606, 125019959, 125044581, 125033231, 125030220, 125025100, 125030712, 125031481, 125022013, 125017810, 125029368, 125018761, 125034160, 125027217, 125035440, 125030164, 125039267, 125021762, 125038093, 125017273, 125047967, 125021729, 125050517, 125057661, 125017784, 125030415, 125024352, 125037918, 125026552, 125035809, 125039951, 125028783, 125003875, 125039804, 125016775, 125047790, 125017963, 125006381, 125055971, 125034781, 125018086, 125046207, 125004081, 125046424, 125030022, 125040984, 125038056, 125020529, 125032406, 125040779, 125041314, 125033796, 125052588, 125047857, 125029777, 125043343, 125037604, 125028742, 125052986, 125035662, 125038873, 125013180, 125026985, 125032080, 125036825, 125040404, 125021229, 125055183, 125042400, 125007990, 125047183, 125029576, 125030994, 125035659, 125034697, 125049109, 125018094, 125055828, 125026878, 125033666, 125028810, 125029694, 125034356, 125026855, 125041159, 125024961, 125038408, 125059392, 125048526, 125013876, 125009836, 125043076, 125059013, 125036708, 125039831, 125029182, 125046022, 125032303, 125023750, 125018210, 125028253, 125046361, 125042604, 125048044, 125031284, 125053542, 125031217, 125042352, 125043418, 125038516, 125041698, 125015223, 125012846, 125030797, 125051633, 125015573, 125031583, 125017602, 125035816, 125046850, 125032355, 125052169))));
    }
    public int solve(ArrayList<Integer> A) {
        int maxXor = Integer.MIN_VALUE;
        int maxVal = Integer.MIN_VALUE;
        System.out.println(A.size());
        for(int a :A){
            maxVal = Math.max(a,maxVal);
        }
        if(maxVal == 0){
            return 0;
        }
        int counter = 31;
        int num = 1 << counter;

        while((num & maxVal) != num){
            counter--;
            num = 1 << counter;
        }
        Trie trieTree = new Trie();
        trieTree.maxLevel = counter;

        for(int a : A){
            maxXor = Math.max(trieTree.getMaxXorNum(a)^a,maxXor);
            trieTree.addChild(a);
        }
        return maxXor;
    }

    public class Trie{
        TrieNode root = new TrieNode();
        int maxLevel = 31;
        void addChild(int num){
            TrieNode current = root;
            int compare = 1 << maxLevel;
            while(compare != 0){
                boolean isLeft = (compare & num) == 0;
                if(isLeft){
                    if(current.left == null){
                        current.left = new TrieNode();
                    }
                    current = current.left;

                }else{
                    if(current.right == null){
                        current.right = new TrieNode();
                    }

                    current = current.right;
                }
                compare = compare >> 1;
            }
            current.data = num;
        }

        int getMaxXorNum(int a){
            if(root.left == null && root.right == null){
                return 0;
            }
            TrieNode current = root;
            int compare = 1 << maxLevel;
            while(compare != 0){
                if(current == null){
                    return Integer.MIN_VALUE;
                }
                int bitRequired = ((compare & a) == 0) ? 1 : 0;
                if(bitRequired == 0 && current.left != null){
                    current = current.left;
                }else if(bitRequired == 1 && current.right != null){
                    current = current.right;
                }else{
                    current = current.left == null ? current.right : current.left;
                }
                compare = compare >> 1;
            }
            return current!= null ?  current.data : Integer.MIN_VALUE;
        }
    }

    public class TrieNode{
        TrieNode left;//0
        TrieNode right;//1
        int data;
    }
}
